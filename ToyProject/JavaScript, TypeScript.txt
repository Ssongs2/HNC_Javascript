1. 
넷스케이프(파이어폭스 전신)
1995
LiveScript
2.
ECMA단체 - Javascript
3.
~
ECMA5.0

4. 
2015 연도표기법
Javascript ESCM2015 - 모던 자바스크립트

5.0으로 변환하는 트랜스 파일러가 필요(Babel)

결론: ECMA5.0이 중요, 현역에 실행되는 버전의 JavaScript이기 때문에.
모던 자바스크립트는 ES2015부터 중요

-------------------------------------------------
자바스크립트 런타임 환경
1. 브라우저
+ 웹서버 (HTML -> 브라우저)
	1. JavaScript가 동적으로 UI를 조작하는 (클라이언트 사이드 렌더링)
	2. 웹서버가 HTML을 주도적으로 만들어서 UI를 표현하는 (서버 사이드 렌더링)
2. Node.js

그래픽
캔버스 + Javascript API(빅터 단위인 SVG활용)
-------------------------------------------------
ES2015버전부터 모던 JavaScript다.

개발환경이 급변됨.
대표적 Node.js와 npm ,제공되는 도구와 도구 환경, 개발 환경

Javascript가 대규모의 웹앱으로 구성하기위한 필수요소
*모듈
 
문제
1. 브라우저 호환성

문제 해결 -> 
번들러 Javascript파일 안에서 
다른 Javascript를 부르는 것을 하나의 파일로 만듦.(Webpack)

1. 트랜스 파일링(인간이 이해할 수 있는 언어를 기계가 읽고 이해할 수 있는 작업이 필요)
브라우저가 이해할 수 있는 Javascript 외에 다른 언어를 사용하여
개발하고싶을 경우 해당 번들러를 이용해서 개발 할 수 있음.
2. 필요없는 파일 제거
3. 중요한 코드 보안, 어글리파이(코드를 못생기게 만드는 것)
4. 이미지 최적화
-------------------------------------------------
TypeScript
데이터 유형 정의의 중요성
프로그램의 규모가 크면 클수록 개발자의 수도 많고
유지보수가 오래도록 이뤄져야 함.

소프트웨어를 만드는데 얼마나 단단하게 할 수 있는지
-------------------------------------------------
Node.js
라이언달의 아이디어: 일반 운영체제 환경에서 다른 소프트웨어처럼 실행시킬 수 있지 않을까?
JavaScript 런타임 환경
-------------------------------------------------
입력 -> 출력

CODING
DOM API를 이용해서 UI의 구조가 잘 드러나지 않는 문제점을 해결하는 방법? -> 최대한 사용하지 않는 것.

이벤트시스템


------------------------------------------------
양이 늘어나더라도 복잡도는 증가하지 않는 코드를 작성할 수 있어야 함.
DOM API -> 문자열 
기존 방식 -> 템플릿사용
실제로 코드와 UI가 성격이 다르기 때문에 분리해주면 훨씬 복잡도를 줄일 수 있음

------------------------------------------------
tailwind css
fontawsome